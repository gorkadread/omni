{"version":3,"sources":["SubmitTransaction.jsx","TransactionHistory.jsx","App.js","reportWebVitals.js","index.js"],"names":["SubmitTransaction","useState","transactionAmount","setTransactionAmount","accountId","setAccountId","error","setError","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","socket","emit","className","onChange","target","value","placeholder","type","TransactionHistory","transactionsState","setTransactions","loading","setLoading","messageHandler","transactions","i","length","toFrom","amount","fMessage","account_id","useEffect","on","resp","updatedTransactions","map","transaction","balance_after","transaction_id","io","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46a3c138.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { socket } from './App'\n\nconst SubmitTransaction = () => {\n  const [transactionAmount, setTransactionAmount] = useState(\"\");\n  const [accountId, setAccountId] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n\n    try {\n      let res = await fetch('/transactions', {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          'account_id': accountId,\n          'amount': transactionAmount\n        }),\n      }).then(response => response.json()\n        .then(data => {\n          // Trigger a realtime socket-call\n          socket.emit('TransactionAdded', { 'data': { data } });\n\n          setAccountId(\"\");\n          setTransactionAmount(\"\");\n        })\n      );\n    } catch (err) {\n      setError('Something went wrong. Please check your inputs!');\n    }\n  };\n\n  return <div>\n    <header className=\"bank-child-header\">Submit new transaction</header>\n\n    <div className=\"error\">{error}</div>\n    <form onSubmit={onSubmit}>\n      <label>\n        Account ID:\n        <br />\n        <input data-type=\"account-id\" onChange={(e) => {\n          setAccountId(e.target.value);\n          setError('');\n        }}\n          value={accountId}\n          placeholder=\"Enter account ID\"\n        />\n      </label>\n      <br />\n      <label>\n        Amount:\n        <br />\n        <input data-type=\"amount\" onChange={(e) => {\n          setTransactionAmount(e.target.value);\n          setError('');\n        }}\n          value={transactionAmount}\n          placeholder=\"Enter transfer amount\"\n        />\n      </label>\n      <br />\n      <input data-type=\"transaction-submit\" type=\"submit\" />\n    </form>\n  </div>\n};\n\nexport default SubmitTransaction;","import React, { useState, useEffect } from \"react\";\nimport { socket } from './App'\n\nconst TransactionHistory = () => {\n  const [transactionsState, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Compiles the friendly message of transactions performed\n  const messageHandler = (transactions) => {\n    for (var i = 0; i < transactions.length; i++) {\n      let toFrom = transactions[i].amount > 0 ? 'to' : 'from';\n      transactions[i].fMessage = `Transferred ${transactions[i].amount}$ ${toFrom} account ${transactions[i].account_id}.`;\n    }\n\n    setTransactions(transactions);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    // Subscribe to the added transactions socket\n    // This way we save a couple of rerenders and the code is much cleaner\n    socket.on('transactionAddedResponse', (resp) => {\n      let updatedTransactions = resp.data;\n      messageHandler(updatedTransactions);\n    })\n\n    fetch(\"/transactions/\")\n      .then(response => response.json()\n        .then(data => {\n          messageHandler(data)\n        })\n      )\n  }, []);\n\n  if (loading) {\n    return <div>\n      <header className=\"bank-child-header\">Transaction history</header>\n      'Loading transactions...'</div>\n  } else {\n    if (transactionsState.length > 0) {\n      return <div>\n        <header className=\"bank-child-header\">Transaction history</header>\n        {transactionsState.map((transaction) => (\n          <div className=\"transaction\" key={transaction.transaction_id}\n            data-type=\"transaction\"\n            data-account-id={transaction.account_id}\n            data-amount={transaction.amount}\n            data-balance={transaction.balance_after}>\n            {transaction.fMessage}\n            < br />\n            The current account balance is {transaction.balance_after}$.\n          </div>\n        ))}\n\n      </div >\n    } else {\n      return <div>No transactions yet.</div>\n    }\n  }\n};\n\nexport default TransactionHistory;","import './App.css';\nimport React, { useState } from \"react\";\nimport SubmitTransaction from \"./SubmitTransaction\";\nimport TransactionHistory from \"./TransactionHistory\";\nimport io from 'socket.io-client';\n\nexport const socket = io('http://127.0.0.1:5000');\n\n\nfunction App() {\n  return (\n    <div className=\"bank\">\n      <header className=\"bank-header\">\n        <p>The Bank</p>\n      </header>\n      <div className=\"flex-parent\">\n        <div className=\"flex-child bank-left-side\"><SubmitTransaction /></div>\n        <div className=\"flex-child bank-right-side\"><TransactionHistory /></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}