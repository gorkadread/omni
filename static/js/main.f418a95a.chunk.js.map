{"version":3,"sources":["SubmitTransaction.jsx","TransactionHistory.jsx","App.js","reportWebVitals.js","index.js"],"names":["SubmitTransaction","useState","transactionAmount","setTransactionAmount","accountId","setAccountId","error","setError","onSubmit","e","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","data","socket","emit","className","onChange","target","value","placeholder","type","TransactionHistory","transactionsState","setTransactions","loading","setLoading","messageHandler","transactions","i","length","toFrom","amount","fMessage","account_id","useEffect","on","resp","updatedTransactions","map","transaction","balance_after","transaction_id","io","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f418a95a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { socket } from './App'\r\n\r\nconst SubmitTransaction = () => {\r\n  const [transactionAmount, setTransactionAmount] = useState(\"\");\r\n  const [accountId, setAccountId] = useState(\"\");\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      let res = await fetch('/transactions', {\r\n        method: \"POST\",\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({\r\n          'account_id': accountId,\r\n          'amount': transactionAmount\r\n        }),\r\n      }).then(response => response.json()\r\n        .then(data => {\r\n          // Trigger a realtime socket-call instead of this nasty props-business\r\n          socket.emit('TransactionAdded', { 'data': { data } });\r\n\r\n          setAccountId(\"\");\r\n          setTransactionAmount(\"\");\r\n        })\r\n      );\r\n    } catch (err) {\r\n      setError('Something went wrong. Please check your inputs!');\r\n    }\r\n  };\r\n\r\n  return <div>\r\n    <header className=\"bank-child-header\">Submit new transaction</header>\r\n\r\n    <div className=\"error\">{error}</div>\r\n    <form onSubmit={onSubmit}>\r\n      <label>\r\n        Account ID:\r\n        <br />\r\n        <input data-type=\"account-id\" onChange={(e) => {\r\n          setAccountId(e.target.value);\r\n          setError('');\r\n        }}\r\n          value={accountId}\r\n          placeholder=\"Enter account ID\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Amount:\r\n        <br />\r\n        <input data-type=\"amount\" onChange={(e) => {\r\n          setTransactionAmount(e.target.value);\r\n          setError('');\r\n        }}\r\n          value={transactionAmount}\r\n          placeholder=\"Enter transfer amount\"\r\n        />\r\n      </label>\r\n      <br />\r\n      <input data-type=\"transaction-submit\" type=\"submit\" />\r\n    </form>\r\n  </div>\r\n};\r\n\r\nexport default SubmitTransaction;","import React, { useState, useEffect } from \"react\";\r\nimport { socket } from './App'\r\n\r\nconst TransactionHistory = () => {\r\n  const [transactionsState, setTransactions] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Compiles the friendly message of transactions performed\r\n  const messageHandler = (transactions) => {\r\n    for (var i = 0; i < transactions.length; i++) {\r\n      let toFrom = transactions[i].amount > 0 ? 'to' : 'from';\r\n      transactions[i].fMessage = `Transferred ${transactions[i].amount}$ ${toFrom} account ${transactions[i].account_id}.`;\r\n    }\r\n\r\n    setTransactions(transactions);\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Subscribe to the added transactions socket\r\n    // This way we save a couple of rerenders and the code is much cleaner\r\n    socket.on('transactionAddedResponse', (resp) => {\r\n      let updatedTransactions = resp.data;\r\n      messageHandler(updatedTransactions);\r\n    })\r\n\r\n    fetch(\"/transactions/\")\r\n      .then(response => response.json()\r\n        .then(data => {\r\n          messageHandler(data)\r\n        })\r\n      )\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>\r\n      <header className=\"bank-child-header\">Transaction history</header>\r\n      'Loading transactions...'</div>\r\n  } else {\r\n    if (transactionsState.length > 0) {\r\n      return <div>\r\n        <header className=\"bank-child-header\">Transaction history</header>\r\n        {transactionsState.map((transaction) => (\r\n          <div className=\"transaction\" key={transaction.transaction_id}\r\n            data-type=\"transaction\"\r\n            data-account-id={transaction.account_id}\r\n            data-amount={transaction.amount}\r\n            data-balance={transaction.balance_after}>\r\n            {transaction.fMessage}\r\n            < br />\r\n            The current account balance is {transaction.balance_after}$.\r\n          </div>\r\n        ))}\r\n\r\n      </div >\r\n    } else {\r\n      return <div>No transactions yet.</div>\r\n    }\r\n  }\r\n};\r\n\r\nexport default TransactionHistory;","import './App.css';\r\nimport React, { useState } from \"react\";\r\nimport SubmitTransaction from \"./SubmitTransaction\";\r\nimport TransactionHistory from \"./TransactionHistory\";\r\nimport io from 'socket.io-client';\r\n\r\nexport const socket = io('http://127.0.0.1:5000');\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"bank\">\r\n      <header className=\"bank-header\">\r\n        <p>The Bank</p>\r\n      </header>\r\n      <div className=\"flex-parent\">\r\n        <div className=\"flex-child bank-left-side\"><SubmitTransaction /></div>\r\n        <div className=\"flex-child bank-right-side\"><TransactionHistory /></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}